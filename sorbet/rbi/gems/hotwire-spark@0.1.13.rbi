# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hotwire-spark` gem.
# Please instead update this file by running `bin/tapioca gem hotwire-spark`.


# source://hotwire-spark//lib/hotwire/spark/version.rb#1
module Hotwire; end

# source://hotwire-spark//lib/hotwire/spark/version.rb#2
module Hotwire::Spark
  # source://hotwire-spark//lib/hotwire-spark.rb#19
  def cable_server_path; end

  # source://hotwire-spark//lib/hotwire-spark.rb#19
  def cable_server_path=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def css_extensions; end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def css_extensions=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def css_paths; end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def css_paths=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#18
  def enabled; end

  # source://hotwire-spark//lib/hotwire-spark.rb#18
  def enabled=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def html_extensions; end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def html_extensions=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def html_paths; end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def html_paths=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#17
  def html_reload_method; end

  # source://hotwire-spark//lib/hotwire-spark.rb#17
  def html_reload_method=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#16
  def logging; end

  # source://hotwire-spark//lib/hotwire-spark.rb#16
  def logging=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def stimulus_extensions; end

  # source://hotwire-spark//lib/hotwire-spark.rb#13
  def stimulus_extensions=(val); end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def stimulus_paths; end

  # source://hotwire-spark//lib/hotwire-spark.rb#12
  def stimulus_paths=(val); end

  class << self
    # source://hotwire-spark//lib/hotwire-spark.rb#30
    def cable_server; end

    # source://hotwire-spark//lib/hotwire-spark.rb#19
    def cable_server_path; end

    # source://hotwire-spark//lib/hotwire-spark.rb#19
    def cable_server_path=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def css_extensions; end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def css_extensions=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def css_paths; end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def css_paths=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#18
    def enabled; end

    # source://hotwire-spark//lib/hotwire-spark.rb#18
    def enabled=(val); end

    # @return [Boolean]
    #
    # source://hotwire-spark//lib/hotwire-spark.rb#26
    def enabled?; end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def html_extensions; end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def html_extensions=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def html_paths; end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def html_paths=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#17
    def html_reload_method; end

    # source://hotwire-spark//lib/hotwire-spark.rb#17
    def html_reload_method=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#22
    def install_into(application); end

    # source://hotwire-spark//lib/hotwire-spark.rb#16
    def logging; end

    # source://hotwire-spark//lib/hotwire-spark.rb#16
    def logging=(val); end

    # source://railties/8.0.2/lib/rails/engine.rb#413
    def railtie_helpers_paths; end

    # source://railties/8.0.2/lib/rails/engine.rb#396
    def railtie_namespace; end

    # source://railties/8.0.2/lib/rails/engine.rb#417
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def stimulus_extensions; end

    # source://hotwire-spark//lib/hotwire-spark.rb#13
    def stimulus_extensions=(val); end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def stimulus_paths; end

    # source://hotwire-spark//lib/hotwire-spark.rb#12
    def stimulus_paths=(val); end

    # source://railties/8.0.2/lib/rails/engine.rb#402
    def table_name_prefix; end

    # source://railties/8.0.2/lib/rails/engine.rb#409
    def use_relative_model_naming?; end
  end
end

module Hotwire::Spark::ActionCable; end

# source://hotwire-spark//lib/hotwire/spark/action_cable/server.rb#1
class Hotwire::Spark::ActionCable::Server < ::ActionCable::Server::Base
  # @return [Server] a new instance of Server
  #
  # source://hotwire-spark//lib/hotwire/spark/action_cable/server.rb#2
  def initialize; end
end

# source://hotwire-spark//lib/hotwire/spark/change.rb#1
class Hotwire::Spark::Change
  # @return [Change] a new instance of Change
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#4
  def initialize(monitored_paths, extensions, changed_path, action); end

  # Returns the value of attribute action.
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#2
  def action; end

  # source://hotwire-spark//lib/hotwire/spark/change.rb#11
  def broadcast; end

  # Returns the value of attribute changed_path.
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#2
  def changed_path; end

  # Returns the value of attribute extensions.
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#2
  def extensions; end

  # Returns the value of attribute monitored_paths.
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#2
  def monitored_paths; end

  private

  # source://hotwire-spark//lib/hotwire/spark/change.rb#16
  def broadcast_reload_action; end

  # source://hotwire-spark//lib/hotwire/spark/change.rb#24
  def canonical_changed_path; end

  # source://hotwire-spark//lib/hotwire/spark/change.rb#34
  def extension_regexp; end

  # source://hotwire-spark//lib/hotwire/spark/change.rb#20
  def reload_message; end

  # @return [Boolean]
  #
  # source://hotwire-spark//lib/hotwire/spark/change.rb#30
  def should_broadcast?; end
end

class Hotwire::Spark::Channel < ::ActionCable::Channel::Base
  def subscribed; end
end

# source://hotwire-spark//lib/hotwire/spark/default_options.rb#1
class Hotwire::Spark::DefaultOptions
  # @return [DefaultOptions] a new instance of DefaultOptions
  #
  # source://hotwire-spark//lib/hotwire/spark/default_options.rb#2
  def initialize; end

  # source://hotwire-spark//lib/hotwire/spark/default_options.rb#8
  def to_h; end

  private

  # source://hotwire-spark//lib/hotwire/spark/default_options.rb#13
  def base_options; end

  # source://hotwire-spark//lib/hotwire/spark/default_options.rb#26
  def build; end

  # source://hotwire-spark//lib/hotwire/spark/default_options.rb#30
  def configure_jsbundling; end
end

# source://hotwire-spark//lib/hotwire/spark/engine.rb#5
class Hotwire::Spark::Engine < ::Rails::Engine
  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#3
class Hotwire::Spark::FileWatcher
  # @return [FileWatcher] a new instance of FileWatcher
  #
  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#4
  def initialize; end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#8
  def monitor(paths, &callback); end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#14
  def start; end

  private

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#45
  def as_relative_path(path); end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#23
  def expand_path(path); end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#31
  def only_existing_paths(paths); end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#27
  def paths; end

  # source://hotwire-spark//lib/hotwire/spark/file_watcher.rb#35
  def process_changed_files(changed_files); end
end

# source://hotwire-spark//lib/hotwire/spark/installer.rb#1
class Hotwire::Spark::Installer
  # @return [Installer] a new instance of Installer
  #
  # source://hotwire-spark//lib/hotwire/spark/installer.rb#2
  def initialize(application); end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#6
  def install; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#14
  def middleware(*_arg0, **_arg1, &_arg2); end

  private

  # Returns the value of attribute application.
  #
  # source://hotwire-spark//lib/hotwire/spark/installer.rb#13
  def application; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#44
  def broadcast_change(monitored_paths, extensions, changed_path, action); end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#16
  def configure_cable_server; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#22
  def configure_middleware; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#48
  def file_watcher; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#37
  def monitor(paths_name, action:, extensions:); end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#26
  def monitor_paths; end

  # source://hotwire-spark//lib/hotwire/spark/installer.rb#31
  def register_monitored_paths; end
end

# source://hotwire-spark//lib/hotwire/spark/middleware.rb#1
class Hotwire::Spark::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#2
  def initialize(app); end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#6
  def call(env); end

  private

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#58
  def cable_server_path_option; end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#31
  def html_from(response); end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#66
  def html_reload_method_option; end

  # @return [Boolean]
  #
  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#27
  def html_response?(headers); end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#37
  def inject_javascript(html); end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#50
  def inject_options(html); end

  # @return [Boolean]
  #
  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#23
  def interceptable_request?; end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#62
  def logging_option; end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#54
  def options; end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#41
  def script_tag; end

  # source://hotwire-spark//lib/hotwire/spark/middleware.rb#46
  def view_helpers; end
end

# source://hotwire-spark//lib/hotwire/spark/version.rb#3
Hotwire::Spark::VERSION = T.let(T.unsafe(nil), String)
